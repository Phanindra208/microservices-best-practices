// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "microservice API",
    "title": "microservice API",
    "version": "1.0.0"
  },
  "basePath": "/",
  "paths": {
    "/feed-post": {
      "post": {
        "description": "postfeed",
        "tags": [
          "feed"
        ],
        "summary": "post feed",
        "operationId": "Create_Feed",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/feed_post"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request \u003cbr\u003e\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/follow": {
      "post": {
        "description": "follow user",
        "tags": [
          "users"
        ],
        "summary": "follow user",
        "operationId": "Follow_User",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/frend_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request \u003cbr\u003e\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/friends-feed": {
      "post": {
        "description": "Friends Feed",
        "tags": [
          "feed"
        ],
        "summary": "friends feed",
        "operationId": "Friends_Feed",
        "parameters": [
          {
            "type": "string",
            "name": "user_email_id",
            "in": "query"
          },
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pagestate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully user feed",
            "schema": {
              "$ref": "#/definitions/friends_feed"
            }
          },
          "400": {
            "description": "Bad request \u003cbr\u003e\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/liveness": {
      "get": {
        "tags": [
          "Health"
        ],
        "operationId": "Liveness",
        "responses": {
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/readiness": {
      "get": {
        "tags": [
          "Health"
        ],
        "operationId": "Readiness",
        "responses": {
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/relates": {
      "post": {
        "description": "related feed response",
        "tags": [
          "feed"
        ],
        "summary": "related feed",
        "operationId": "Get_Related_Feed",
        "parameters": [
          {
            "type": "string",
            "name": "user_email_id",
            "in": "query"
          },
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pagestate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got loyalty points",
            "schema": {
              "$ref": "#/definitions/related_feed_response"
            }
          },
          "400": {
            "description": "Bad request \u003cbr\u003e\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/un-follow": {
      "post": {
        "description": "un-follow user",
        "tags": [
          "users"
        ],
        "summary": "un-follow user",
        "operationId": "Un_Follow_User",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/frend_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request \u003cbr\u003e\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/user": {
      "post": {
        "description": "create user",
        "tags": [
          "users"
        ],
        "summary": "create user",
        "operationId": "Create_User",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request \u003cbr\u003e\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/user-feed": {
      "post": {
        "description": "user feed",
        "tags": [
          "feed"
        ],
        "summary": "user feed",
        "operationId": "User_Feed",
        "parameters": [
          {
            "type": "string",
            "name": "user_email_id",
            "in": "query"
          },
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pagestate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully user feed",
            "schema": {
              "$ref": "#/definitions/users_feed"
            }
          },
          "400": {
            "description": "Bad request \u003cbr\u003e\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "Get All Users",
        "tags": [
          "users"
        ],
        "summary": "Get users",
        "operationId": "Get_Users",
        "responses": {
          "200": {
            "description": "Get users",
            "schema": {
              "$ref": "#/definitions/users"
            }
          },
          "400": {
            "description": "Bad request \u003cbr\u003e\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    }
  },
  "definitions": {
    "ErrorResponse": {
      "description": "Error response body for 4xx responses",
      "properties": {
        "code": {
          "description": "6xx if validation error.\n1000+ for special errors.\nOtherwise, normal HTTP status codes apply.\n",
          "type": "integer",
          "x-order": 0
        },
        "message": {
          "description": "Informative text - not for error checking",
          "type": "string",
          "x-order": 1
        },
        "validation": {
          "description": "Details about validation error",
          "type": "object",
          "properties": {
            "code": {
              "description": "Error code for validation error - like error_code",
              "type": "string",
              "x-order": 1
            },
            "param": {
              "description": "The parameter name which caused the error",
              "type": "string",
              "x-order": 0
            }
          },
          "x-order": 2
        }
      }
    },
    "feed_post": {
      "description": "feed post",
      "type": "object",
      "properties": {
        "actor": {
          "type": "string",
          "x-go-name": "actor",
          "x-order": 0
        },
        "createdat": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "createdat",
          "x-order": 4
        },
        "object": {
          "type": "string",
          "x-go-name": "object",
          "x-order": 2
        },
        "target": {
          "type": "string",
          "x-go-name": "target",
          "x-order": 3
        },
        "verb": {
          "type": "string",
          "x-go-name": "verb",
          "x-order": 1
        }
      },
      "x-go-package": "github.com/iAmPlus/microservice/models"
    },
    "frend_request": {
      "description": "User structure",
      "type": "object",
      "properties": {
        "source_user_email_id": {
          "type": "string",
          "x-go-name": "source_user_email_id",
          "x-order": 0
        },
        "target_user_email_id": {
          "type": "string",
          "x-go-name": "target_user_email_id",
          "x-order": 1
        }
      },
      "x-go-package": "github.com/iAmPlus/microservice/models"
    },
    "friends_feed": {
      "description": "list of Users structure",
      "type": "object",
      "properties": {
        "friends_feed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/feed_post"
          },
          "x-order": 0
        },
        "page_state": {
          "x-order": 1,
          "$ref": "#/definitions/pagination_data"
        }
      },
      "x-go-package": "github.com/iAmPlus/hotels/models"
    },
    "pagestate": {
      "type": "object",
      "properties": {
        "pageid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageID",
          "x-order": 0
        },
        "pagesize": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize",
          "x-order": 1
        }
      },
      "x-go-name": "PageState"
    },
    "pagination_data": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page",
          "x-order": 0
        },
        "perPage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PerPage",
          "x-order": 1
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total",
          "x-order": 2
        },
        "totalPage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalPage",
          "x-order": 3
        }
      },
      "x-go-package": "github.com/iAmPlus/skill-news-go/common"
    },
    "related_feed": {
      "description": "list of Users structure",
      "type": "object",
      "properties": {
        "actor": {
          "type": "string",
          "x-go-name": "actor",
          "x-order": 0
        },
        "object": {
          "type": "string",
          "x-go-name": "object",
          "x-order": 2
        },
        "related": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/feed_post"
          },
          "x-order": 4
        },
        "target": {
          "type": "string",
          "x-go-name": "target",
          "x-order": 3
        },
        "verb": {
          "type": "string",
          "x-go-name": "verb",
          "x-order": 1
        }
      },
      "x-go-package": "github.com/iAmPlus/hotels/models"
    },
    "related_feed_response": {
      "description": "related_feed structure",
      "type": "object",
      "properties": {
        "page_state": {
          "x-order": 1,
          "$ref": "#/definitions/pagination_data"
        },
        "related_feed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/related_feed"
          },
          "x-order": 0
        }
      },
      "x-go-package": "github.com/iAmPlus/hotels/models"
    },
    "user": {
      "description": "User structure",
      "type": "object",
      "properties": {
        "friends": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-order": 2
        },
        "reg_date": {
          "type": "string",
          "x-go-name": "reg_date",
          "x-order": 1
        },
        "user_email_id": {
          "type": "string",
          "x-go-name": "user_email_id",
          "x-order": 0
        }
      },
      "x-go-package": "github.com/iAmPlus/microservice/models"
    },
    "users": {
      "description": "list of Users structure",
      "type": "object",
      "properties": {
        "User": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/user"
          },
          "x-order": 0
        }
      },
      "x-go-package": "github.com/iAmPlus/hotels/models"
    },
    "users_feed": {
      "description": "list of Users structure",
      "type": "object",
      "properties": {
        "my_feed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/feed_post"
          },
          "x-order": 0
        },
        "page_state": {
          "x-order": 1,
          "$ref": "#/definitions/pagination_data"
        }
      },
      "x-go-package": "github.com/iAmPlus/hotels/models"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "microservice API",
    "title": "microservice API",
    "version": "1.0.0"
  },
  "basePath": "/",
  "paths": {
    "/feed-post": {
      "post": {
        "description": "postfeed",
        "tags": [
          "feed"
        ],
        "summary": "post feed",
        "operationId": "Create_Feed",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/feed_post"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request \u003cbr\u003e\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/follow": {
      "post": {
        "description": "follow user",
        "tags": [
          "users"
        ],
        "summary": "follow user",
        "operationId": "Follow_User",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/frend_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request \u003cbr\u003e\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/friends-feed": {
      "post": {
        "description": "Friends Feed",
        "tags": [
          "feed"
        ],
        "summary": "friends feed",
        "operationId": "Friends_Feed",
        "parameters": [
          {
            "type": "string",
            "name": "user_email_id",
            "in": "query"
          },
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pagestate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully user feed",
            "schema": {
              "$ref": "#/definitions/friends_feed"
            }
          },
          "400": {
            "description": "Bad request \u003cbr\u003e\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/liveness": {
      "get": {
        "tags": [
          "Health"
        ],
        "operationId": "Liveness",
        "responses": {
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/readiness": {
      "get": {
        "tags": [
          "Health"
        ],
        "operationId": "Readiness",
        "responses": {
          "204": {
            "description": "No content"
          }
        }
      }
    },
    "/relates": {
      "post": {
        "description": "related feed response",
        "tags": [
          "feed"
        ],
        "summary": "related feed",
        "operationId": "Get_Related_Feed",
        "parameters": [
          {
            "type": "string",
            "name": "user_email_id",
            "in": "query"
          },
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pagestate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully got loyalty points",
            "schema": {
              "$ref": "#/definitions/related_feed_response"
            }
          },
          "400": {
            "description": "Bad request \u003cbr\u003e\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/un-follow": {
      "post": {
        "description": "un-follow user",
        "tags": [
          "users"
        ],
        "summary": "un-follow user",
        "operationId": "Un_Follow_User",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/frend_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request \u003cbr\u003e\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/user": {
      "post": {
        "description": "create user",
        "tags": [
          "users"
        ],
        "summary": "create user",
        "operationId": "Create_User",
        "parameters": [
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request \u003cbr\u003e\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/user-feed": {
      "post": {
        "description": "user feed",
        "tags": [
          "feed"
        ],
        "summary": "user feed",
        "operationId": "User_Feed",
        "parameters": [
          {
            "type": "string",
            "name": "user_email_id",
            "in": "query"
          },
          {
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pagestate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully user feed",
            "schema": {
              "$ref": "#/definitions/users_feed"
            }
          },
          "400": {
            "description": "Bad request \u003cbr\u003e\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "Get All Users",
        "tags": [
          "users"
        ],
        "summary": "Get users",
        "operationId": "Get_Users",
        "responses": {
          "200": {
            "description": "Get users",
            "schema": {
              "$ref": "#/definitions/users"
            }
          },
          "400": {
            "description": "Bad request \u003cbr\u003e\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error"
          }
        }
      }
    }
  },
  "definitions": {
    "ErrorResponse": {
      "description": "Error response body for 4xx responses",
      "properties": {
        "code": {
          "description": "6xx if validation error.\n1000+ for special errors.\nOtherwise, normal HTTP status codes apply.\n",
          "type": "integer",
          "x-order": 0
        },
        "message": {
          "description": "Informative text - not for error checking",
          "type": "string",
          "x-order": 1
        },
        "validation": {
          "description": "Details about validation error",
          "type": "object",
          "properties": {
            "code": {
              "description": "Error code for validation error - like error_code",
              "type": "string",
              "x-order": 1
            },
            "param": {
              "description": "The parameter name which caused the error",
              "type": "string",
              "x-order": 0
            }
          },
          "x-order": 2
        }
      }
    },
    "ErrorResponseValidation": {
      "description": "Details about validation error",
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code for validation error - like error_code",
          "type": "string",
          "x-order": 1
        },
        "param": {
          "description": "The parameter name which caused the error",
          "type": "string",
          "x-order": 0
        }
      },
      "x-order": 2
    },
    "feed_post": {
      "description": "feed post",
      "type": "object",
      "properties": {
        "actor": {
          "type": "string",
          "x-go-name": "actor",
          "x-order": 0
        },
        "createdat": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "createdat",
          "x-order": 4
        },
        "object": {
          "type": "string",
          "x-go-name": "object",
          "x-order": 2
        },
        "target": {
          "type": "string",
          "x-go-name": "target",
          "x-order": 3
        },
        "verb": {
          "type": "string",
          "x-go-name": "verb",
          "x-order": 1
        }
      },
      "x-go-package": "github.com/iAmPlus/microservice/models"
    },
    "frend_request": {
      "description": "User structure",
      "type": "object",
      "properties": {
        "source_user_email_id": {
          "type": "string",
          "x-go-name": "source_user_email_id",
          "x-order": 0
        },
        "target_user_email_id": {
          "type": "string",
          "x-go-name": "target_user_email_id",
          "x-order": 1
        }
      },
      "x-go-package": "github.com/iAmPlus/microservice/models"
    },
    "friends_feed": {
      "description": "list of Users structure",
      "type": "object",
      "properties": {
        "friends_feed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/feed_post"
          },
          "x-order": 0
        },
        "page_state": {
          "x-order": 1,
          "$ref": "#/definitions/pagination_data"
        }
      },
      "x-go-package": "github.com/iAmPlus/hotels/models"
    },
    "pagestate": {
      "type": "object",
      "properties": {
        "pageid": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageID",
          "x-order": 0
        },
        "pagesize": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PageSize",
          "x-order": 1
        }
      },
      "x-go-name": "PageState"
    },
    "pagination_data": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Page",
          "x-order": 0
        },
        "perPage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PerPage",
          "x-order": 1
        },
        "total": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Total",
          "x-order": 2
        },
        "totalPage": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalPage",
          "x-order": 3
        }
      },
      "x-go-package": "github.com/iAmPlus/skill-news-go/common"
    },
    "related_feed": {
      "description": "list of Users structure",
      "type": "object",
      "properties": {
        "actor": {
          "type": "string",
          "x-go-name": "actor",
          "x-order": 0
        },
        "object": {
          "type": "string",
          "x-go-name": "object",
          "x-order": 2
        },
        "related": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/feed_post"
          },
          "x-order": 4
        },
        "target": {
          "type": "string",
          "x-go-name": "target",
          "x-order": 3
        },
        "verb": {
          "type": "string",
          "x-go-name": "verb",
          "x-order": 1
        }
      },
      "x-go-package": "github.com/iAmPlus/hotels/models"
    },
    "related_feed_response": {
      "description": "related_feed structure",
      "type": "object",
      "properties": {
        "page_state": {
          "x-order": 1,
          "$ref": "#/definitions/pagination_data"
        },
        "related_feed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/related_feed"
          },
          "x-order": 0
        }
      },
      "x-go-package": "github.com/iAmPlus/hotels/models"
    },
    "user": {
      "description": "User structure",
      "type": "object",
      "properties": {
        "friends": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-order": 2
        },
        "reg_date": {
          "type": "string",
          "x-go-name": "reg_date",
          "x-order": 1
        },
        "user_email_id": {
          "type": "string",
          "x-go-name": "user_email_id",
          "x-order": 0
        }
      },
      "x-go-package": "github.com/iAmPlus/microservice/models"
    },
    "users": {
      "description": "list of Users structure",
      "type": "object",
      "properties": {
        "User": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/user"
          },
          "x-order": 0
        }
      },
      "x-go-package": "github.com/iAmPlus/hotels/models"
    },
    "users_feed": {
      "description": "list of Users structure",
      "type": "object",
      "properties": {
        "my_feed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/feed_post"
          },
          "x-order": 0
        },
        "page_state": {
          "x-order": 1,
          "$ref": "#/definitions/pagination_data"
        }
      },
      "x-go-package": "github.com/iAmPlus/hotels/models"
    }
  }
}`))
}
