// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UnFollowUserHandlerFunc turns a function with the right signature into a un follow user handler
type UnFollowUserHandlerFunc func(UnFollowUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UnFollowUserHandlerFunc) Handle(params UnFollowUserParams) middleware.Responder {
	return fn(params)
}

// UnFollowUserHandler interface for that can handle valid un follow user params
type UnFollowUserHandler interface {
	Handle(UnFollowUserParams) middleware.Responder
}

// NewUnFollowUser creates a new http.Handler for the un follow user operation
func NewUnFollowUser(ctx *middleware.Context, handler UnFollowUserHandler) *UnFollowUser {
	return &UnFollowUser{Context: ctx, Handler: handler}
}

/*UnFollowUser swagger:route POST /un-follow users unFollowUser

un-follow user

un-follow user

*/
type UnFollowUser struct {
	Context *middleware.Context
	Handler UnFollowUserHandler
}

func (o *UnFollowUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUnFollowUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
