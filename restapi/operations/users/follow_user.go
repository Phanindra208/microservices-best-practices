// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// FollowUserHandlerFunc turns a function with the right signature into a follow user handler
type FollowUserHandlerFunc func(FollowUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FollowUserHandlerFunc) Handle(params FollowUserParams) middleware.Responder {
	return fn(params)
}

// FollowUserHandler interface for that can handle valid follow user params
type FollowUserHandler interface {
	Handle(FollowUserParams) middleware.Responder
}

// NewFollowUser creates a new http.Handler for the follow user operation
func NewFollowUser(ctx *middleware.Context, handler FollowUserHandler) *FollowUser {
	return &FollowUser{Context: ctx, Handler: handler}
}

/*FollowUser swagger:route POST /follow users followUser

follow user

follow user

*/
type FollowUser struct {
	Context *middleware.Context
	Handler FollowUserHandler
}

func (o *FollowUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFollowUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
