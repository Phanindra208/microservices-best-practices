// Code generated by go-swagger; DO NOT EDIT.

package feed

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UserFeedHandlerFunc turns a function with the right signature into a user feed handler
type UserFeedHandlerFunc func(UserFeedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UserFeedHandlerFunc) Handle(params UserFeedParams) middleware.Responder {
	return fn(params)
}

// UserFeedHandler interface for that can handle valid user feed params
type UserFeedHandler interface {
	Handle(UserFeedParams) middleware.Responder
}

// NewUserFeed creates a new http.Handler for the user feed operation
func NewUserFeed(ctx *middleware.Context, handler UserFeedHandler) *UserFeed {
	return &UserFeed{Context: ctx, Handler: handler}
}

/*UserFeed swagger:route POST /user-feed feed userFeed

user feed

user feed

*/
type UserFeed struct {
	Context *middleware.Context
	Handler UserFeedHandler
}

func (o *UserFeed) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUserFeedParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
